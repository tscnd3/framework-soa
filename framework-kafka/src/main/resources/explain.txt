#\u4ee5\u4e0b\u4e3a\u7cbe\u7b80\u914d\u7f6e\u53ef\u4ee5\u76f4\u63a5\u653e\u5230application.properties \u65b9\u53ef\u751f\u6548
spring.kafka.bootstrap-servers=192.168.0.195:9092
#\u6d88\u8d39\u7740\u914d\u7f6e
spring.kafka.consumer.group-id=myGroup
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-dserializer=org.apache.kafka.common.serialization.StringDeserializer
#\u751f\u4ea7\u8005\u914d\u7f6e
spring.kafka.producer.group-id=myGroup
spring.kafka.producer.key-deserializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-dserializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.acks=-1
##################\u7cbe\u7b80\u914d\u7f6e\u7ed3\u675f################################################



#################consumer\u7684\u914d\u7f6e\u53c2\u6570\uff08\u5f00\u59cb\uff09#################
#\u5982\u679c'enable.auto.commit'\u4e3atrue\uff0c\u5219\u6d88\u8d39\u8005\u504f\u79fb\u81ea\u52a8\u63d0\u4ea4\u7ed9Kafka\u7684\u9891\u7387\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\uff0c\u9ed8\u8ba4\u503c\u4e3a5000\u3002
spring.kafka.consumer.auto-commit-interval;
  
#\u5f53Kafka\u4e2d\u6ca1\u6709\u521d\u59cb\u504f\u79fb\u91cf\u6216\u8005\u670d\u52a1\u5668\u4e0a\u4e0d\u518d\u5b58\u5728\u5f53\u524d\u504f\u79fb\u91cf\u65f6\u8be5\u600e\u4e48\u529e\uff0c\u9ed8\u8ba4\u503c\u4e3alatest\uff0c\u8868\u793a\u81ea\u52a8\u5c06\u504f\u79fb\u91cd\u7f6e\u4e3a\u6700\u65b0\u7684\u504f\u79fb\u91cf
#\u53ef\u9009\u7684\u503c\u4e3alatest, earliest, none
spring.kafka.consumer.auto-offset-reset=latest;
  
#\u4ee5\u9017\u53f7\u5206\u9694\u7684\u4e3b\u673a\uff1a\u7aef\u53e3\u5bf9\u5217\u8868\uff0c\u7528\u4e8e\u5efa\u7acb\u4e0eKafka\u7fa4\u96c6\u7684\u521d\u59cb\u8fde\u63a5\u3002
spring.kafka.consumer.bootstrap-servers;
  
#ID\u5728\u53d1\u51fa\u8bf7\u6c42\u65f6\u4f20\u9012\u7ed9\u670d\u52a1\u5668;\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u65e5\u5fd7\u8bb0\u5f55\u3002
spring.kafka.consumer.client-id;
  
#\u5982\u679c\u4e3atrue\uff0c\u5219\u6d88\u8d39\u8005\u7684\u504f\u79fb\u91cf\u5c06\u5728\u540e\u53f0\u5b9a\u671f\u63d0\u4ea4\uff0c\u9ed8\u8ba4\u503c\u4e3atrue
spring.kafka.consumer.enable-auto-commit=true;
  
#\u5982\u679c\u6ca1\u6709\u8db3\u591f\u7684\u6570\u636e\u7acb\u5373\u6ee1\u8db3\u201cfetch.min.bytes\u201d\u7ed9\u51fa\u7684\u8981\u6c42\uff0c\u670d\u52a1\u5668\u5728\u56de\u7b54\u83b7\u53d6\u8bf7\u6c42\u4e4b\u524d\u5c06\u963b\u585e\u7684\u6700\u957f\u65f6\u95f4\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09
#\u9ed8\u8ba4\u503c\u4e3a500
spring.kafka.consumer.fetch-max-wait;
  
#\u670d\u52a1\u5668\u5e94\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\u8fd4\u56de\u83b7\u53d6\u8bf7\u6c42\u7684\u6700\u5c0f\u6570\u636e\u91cf\uff0c\u9ed8\u8ba4\u503c\u4e3a1\uff0c\u5bf9\u5e94\u7684kafka\u7684\u53c2\u6570\u4e3afetch.min.bytes\u3002
spring.kafka.consumer.fetch-min-size;
  
#\u7528\u4e8e\u6807\u8bc6\u6b64\u4f7f\u7528\u8005\u6240\u5c5e\u7684\u4f7f\u7528\u8005\u7ec4\u7684\u552f\u4e00\u5b57\u7b26\u4e32\u3002
spring.kafka.consumer.group-id;
  
#\u5fc3\u8df3\u4e0e\u6d88\u8d39\u8005\u534f\u8c03\u5458\u4e4b\u95f4\u7684\u9884\u671f\u65f6\u95f4\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09\uff0c\u9ed8\u8ba4\u503c\u4e3a3000
spring.kafka.consumer.heartbeat-interval;
  
#\u5bc6\u94a5\u7684\u53cd\u5e8f\u5217\u5316\u5668\u7c7b\uff0c\u5b9e\u73b0\u7c7b\u5b9e\u73b0\u4e86\u63a5\u53e3org.apache.kafka.common.serialization.Deserializer
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
  
#\u503c\u7684\u53cd\u5e8f\u5217\u5316\u5668\u7c7b\uff0c\u5b9e\u73b0\u7c7b\u5b9e\u73b0\u4e86\u63a5\u53e3org.apache.kafka.common.serialization.Deserializer
spring.kafka.consumer.value-deserializer=org.apache.kafka.common.serialization.StringDeserializer
  
#\u4e00\u6b21\u8c03\u7528poll()\u64cd\u4f5c\u65f6\u8fd4\u56de\u7684\u6700\u5927\u8bb0\u5f55\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a500
spring.kafka.consumer.max-poll-records;
#################consumer\u7684\u914d\u7f6e\u53c2\u6570\uff08\u7ed3\u675f\uff09#################
#################producer\u7684\u914d\u7f6e\u53c2\u6570\uff08\u5f00\u59cb\uff09#################
#procedure\u8981\u6c42leader\u5728\u8003\u8651\u5b8c\u6210\u8bf7\u6c42\u4e4b\u524d\u6536\u5230\u7684\u786e\u8ba4\u6570\uff0c\u7528\u4e8e\u63a7\u5236\u53d1\u9001\u8bb0\u5f55\u5728\u670d\u52a1\u7aef\u7684\u6301\u4e45\u5316\uff0c\u5176\u503c\u53ef\u4ee5\u4e3a\u5982\u4e0b\uff1a
#acks = 0 \u5982\u679c\u8bbe\u7f6e\u4e3a\u96f6\uff0c\u5219\u751f\u4ea7\u8005\u5c06\u4e0d\u4f1a\u7b49\u5f85\u6765\u81ea\u670d\u52a1\u5668\u7684\u4efb\u4f55\u786e\u8ba4\uff0c\u8be5\u8bb0\u5f55\u5c06\u7acb\u5373\u6dfb\u52a0\u5230\u5957\u63a5\u5b57\u7f13\u51b2\u533a\u5e76\u89c6\u4e3a\u5df2\u53d1\u9001\u3002\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u65e0\u6cd5\u4fdd\u8bc1\u670d\u52a1\u5668\u5df2\u6536\u5230\u8bb0\u5f55\uff0c\u5e76\u4e14\u91cd\u8bd5\u914d\u7f6e\u5c06\u4e0d\u4f1a\u751f\u6548\uff08\u56e0\u4e3a\u5ba2\u6237\u7aef\u901a\u5e38\u4e0d\u4f1a\u77e5\u9053\u4efb\u4f55\u6545\u969c\uff09\uff0c\u4e3a\u6bcf\u6761\u8bb0\u5f55\u8fd4\u56de\u7684\u504f\u79fb\u91cf\u59cb\u7ec8\u8bbe\u7f6e\u4e3a-1\u3002
#acks = 1 \u8fd9\u610f\u5473\u7740leader\u4f1a\u5c06\u8bb0\u5f55\u5199\u5165\u5176\u672c\u5730\u65e5\u5fd7\uff0c\u4f46\u65e0\u9700\u7b49\u5f85\u6240\u6709\u526f\u672c\u670d\u52a1\u5668\u7684\u5b8c\u5168\u786e\u8ba4\u5373\u53ef\u505a\u51fa\u56de\u5e94\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\uff0c\u5982\u679cleader\u5728\u786e\u8ba4\u8bb0\u5f55\u540e\u7acb\u5373\u5931\u8d25\uff0c\u4f46\u5728\u5c06\u6570\u636e\u590d\u5236\u5230\u6240\u6709\u7684\u526f\u672c\u670d\u52a1\u5668\u4e4b\u524d\uff0c\u5219\u8bb0\u5f55\u5c06\u4f1a\u4e22\u5931\u3002
#acks = all \u8fd9\u610f\u5473\u7740leader\u5c06\u7b49\u5f85\u5b8c\u6574\u7684\u540c\u6b65\u526f\u672c\u96c6\u4ee5\u786e\u8ba4\u8bb0\u5f55\uff0c\u8fd9\u4fdd\u8bc1\u4e86\u53ea\u8981\u81f3\u5c11\u4e00\u4e2a\u540c\u6b65\u526f\u672c\u670d\u52a1\u5668\u4ecd\u7136\u5b58\u6d3b\uff0c\u8bb0\u5f55\u5c31\u4e0d\u4f1a\u4e22\u5931\uff0c\u8fd9\u662f\u6700\u5f3a\u6709\u529b\u7684\u4fdd\u8bc1\uff0c\u8fd9\u76f8\u5f53\u4e8eacks = -1\u7684\u8bbe\u7f6e\u3002
#\u53ef\u4ee5\u8bbe\u7f6e\u7684\u503c\u4e3a\uff1aall, -1, 0, 1
spring.kafka.producer.acks=1
  
#\u6bcf\u5f53\u591a\u4e2a\u8bb0\u5f55\u88ab\u53d1\u9001\u5230\u540c\u4e00\u5206\u533a\u65f6\uff0c\u751f\u4ea7\u8005\u5c06\u5c1d\u8bd5\u5c06\u8bb0\u5f55\u4e00\u8d77\u6279\u91cf\u5904\u7406\u4e3a\u66f4\u5c11\u7684\u8bf7\u6c42\uff0c 
#\u8fd9\u6709\u52a9\u4e8e\u63d0\u5347\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u5668\u4e0a\u7684\u6027\u80fd\uff0c\u6b64\u914d\u7f6e\u63a7\u5236\u9ed8\u8ba4\u6279\u91cf\u5927\u5c0f\uff08\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d\uff09\uff0c\u9ed8\u8ba4\u503c\u4e3a16384
spring.kafka.producer.batch-size=16384
  
#\u4ee5\u9017\u53f7\u5206\u9694\u7684\u4e3b\u673a\uff1a\u7aef\u53e3\u5bf9\u5217\u8868\uff0c\u7528\u4e8e\u5efa\u7acb\u4e0eKafka\u7fa4\u96c6\u7684\u521d\u59cb\u8fde\u63a5
spring.kafka.producer.bootstrap-servers
  
#\u751f\u4ea7\u8005\u53ef\u7528\u4e8e\u7f13\u51b2\u7b49\u5f85\u53d1\u9001\u5230\u670d\u52a1\u5668\u7684\u8bb0\u5f55\u7684\u5185\u5b58\u603b\u5b57\u8282\u6570\uff0c\u9ed8\u8ba4\u503c\u4e3a33554432
spring.kafka.producer.buffer-memory=33554432
  
#ID\u5728\u53d1\u51fa\u8bf7\u6c42\u65f6\u4f20\u9012\u7ed9\u670d\u52a1\u5668\uff0c\u7528\u4e8e\u670d\u52a1\u5668\u7aef\u65e5\u5fd7\u8bb0\u5f55
spring.kafka.producer.client-id
  
#\u751f\u4ea7\u8005\u751f\u6210\u7684\u6240\u6709\u6570\u636e\u7684\u538b\u7f29\u7c7b\u578b\uff0c\u6b64\u914d\u7f6e\u63a5\u53d7\u6807\u51c6\u538b\u7f29\u7f16\u89e3\u7801\u5668\uff08'gzip'\uff0c'snappy'\uff0c'lz4'\uff09\uff0c
#\u5b83\u8fd8\u63a5\u53d7'uncompressed'\u4ee5\u53ca'producer'\uff0c\u5206\u522b\u8868\u793a\u6ca1\u6709\u538b\u7f29\u4ee5\u53ca\u4fdd\u7559\u751f\u4ea7\u8005\u8bbe\u7f6e\u7684\u539f\u59cb\u538b\u7f29\u7f16\u89e3\u7801\u5668\uff0c
#\u9ed8\u8ba4\u503c\u4e3aproducer
spring.kafka.producer.compression-type=producer
  
#key\u7684Serializer\u7c7b\uff0c\u5b9e\u73b0\u7c7b\u5b9e\u73b0\u4e86\u63a5\u53e3org.apache.kafka.common.serialization.Serializer
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
  
#\u503c\u7684Serializer\u7c7b\uff0c\u5b9e\u73b0\u7c7b\u5b9e\u73b0\u4e86\u63a5\u53e3org.apache.kafka.common.serialization.Serializer
spring.kafka.producer.value-serializer=org.apache.kafka.common.serialization.StringSerializer
  
#\u5982\u679c\u8be5\u503c\u5927\u4e8e\u96f6\u65f6\uff0c\u8868\u793a\u542f\u7528\u91cd\u8bd5\u5931\u8d25\u7684\u53d1\u9001\u6b21\u6570
spring.kafka.producer.retries=0
#################producer\u7684\u914d\u7f6e\u53c2\u6570\uff08\u7ed3\u675f\uff09#################
#################listener\u7684\u914d\u7f6e\u53c2\u6570\uff08\u5f00\u59cb\uff09#################
#\u4fa6\u542c\u5668\u7684AckMode,\u53c2\u89c1https://docs.spring.io/spring-kafka/reference/htmlsingle/#committing-offsets
#\u5f53enable.auto.commit\u7684\u503c\u8bbe\u7f6e\u4e3afalse\u65f6\uff0c\u8be5\u503c\u4f1a\u751f\u6548\uff1b\u4e3atrue\u65f6\u4e0d\u4f1a\u751f\u6548
spring.kafka.listener.ack-mode;
  
#\u5728\u4fa6\u542c\u5668\u5bb9\u5668\u4e2d\u8fd0\u884c\u7684\u7ebf\u7a0b\u6570
spring.kafka.listener.concurrency;
  
#\u8f6e\u8be2\u6d88\u8d39\u8005\u65f6\u4f7f\u7528\u7684\u8d85\u65f6\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09
spring.kafka.listener.poll-timeout;
  
#\u5f53ackMode\u4e3a\u201cCOUNT\u201d\u6216\u201cCOUNT_TIME\u201d\u65f6\uff0c\u504f\u79fb\u63d0\u4ea4\u4e4b\u95f4\u7684\u8bb0\u5f55\u6570
spring.kafka.listener.ack-count;
  
#\u5f53ackMode\u4e3a\u201cTIME\u201d\u6216\u201cCOUNT_TIME\u201d\u65f6\uff0c\u504f\u79fb\u63d0\u4ea4\u4e4b\u95f4\u7684\u65f6\u95f4\uff08\u4ee5\u6beb\u79d2\u4e3a\u5355\u4f4d\uff09
spring.kafka.listener.ack-time;
#################listener\u7684\u914d\u7f6e\u53c2\u6570\uff08\u7ed3\u675f\uff09#################


